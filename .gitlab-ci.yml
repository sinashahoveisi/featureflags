stages:
  - test
  - build
  - publish

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  GO_VERSION: "1.23"
  POSTGRES_USER: "featureflags"
  POSTGRES_PASSWORD: "featureflags"
  POSTGRES_DB: "featureflags"
  TEST_DB_HOST: "postgres"
  TEST_DB_USER: "featureflags"
  TEST_DB_PASSWORD: "featureflags"
  TEST_DB_NAME: "featureflags_test"
  
# Test stage
test:
  stage: test
  image: golang:${GO_VERSION}-alpine
  services:
    - name: postgres:15-alpine
      alias: postgres
      variables:
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_HOST_AUTH_METHOD: trust
  
  variables:
    CGO_ENABLED: 0
  
  before_script:
    - apk add --no-cache git postgresql-client
    - go version
    - go mod download
    
    # Wait for PostgreSQL to be ready
    - until pg_isready -h postgres -p 5432 -U $POSTGRES_USER; do echo "Waiting for postgres..."; sleep 2; done
    
    # Create test database
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -c "CREATE DATABASE ${TEST_DB_NAME};" || true
  
  script:
    - echo "Running tests..."
    - go test -v -race -coverprofile=coverage.out ./service/...
    - go test -v -race ./test/...
    - go tool cover -html=coverage.out -o coverage.html
    
    # Build to ensure compilation works
    - echo "Building application..."
    - go build -o featureflags ./cmd/main.go
    
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.html
      - coverage.out
    expire_in: 1 week
  
  coverage: '/coverage: \d+\.\d+% of statements/'

# Build Docker image
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
  
  before_script:
    - docker info
    - echo "Building Docker image with commit hash ${CI_COMMIT_SHA}"
  
  script:
    - |
      # Build Docker image with multiple tags
      docker build \
        --tag ${CI_PROJECT_NAME}:${CI_COMMIT_SHA} \
        --tag ${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG} \
        --tag ${CI_PROJECT_NAME}:latest \
        .
    
    # Save image as artifact
    - docker save ${CI_PROJECT_NAME}:${CI_COMMIT_SHA} | gzip > ${CI_PROJECT_NAME}-${CI_COMMIT_SHA}.tar.gz
  
  artifacts:
    paths:
      - ${CI_PROJECT_NAME}-${CI_COMMIT_SHA}.tar.gz
    expire_in: 1 day
  
  only:
    - main
    - develop
    - merge_requests

# Publish to registry
publish:
  stage: publish
  image: docker:24-dind
  services:
    - docker:24-dind
  
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
    # Configure your registry here
    REGISTRY_URL: "${CI_REGISTRY}"
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
  
  before_script:
    - docker info
    - echo "Publishing to registry: ${REGISTRY_URL}"
    - echo "${REGISTRY_PASSWORD}" | docker login -u "${REGISTRY_USER}" --password-stdin "${REGISTRY_URL}"
  
  script:
    # Load the built image
    - docker load < ${CI_PROJECT_NAME}-${CI_COMMIT_SHA}.tar.gz
    
    # Tag for registry
    - docker tag ${CI_PROJECT_NAME}:${CI_COMMIT_SHA} ${REGISTRY_URL}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA}
    - docker tag ${CI_PROJECT_NAME}:${CI_COMMIT_SHA} ${REGISTRY_URL}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}
    
    # Push to registry
    - docker push ${REGISTRY_URL}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA}
    - docker push ${REGISTRY_URL}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}
    
    # Push latest tag only for main branch
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker tag ${CI_PROJECT_NAME}:${CI_COMMIT_SHA} ${REGISTRY_URL}/${CI_PROJECT_PATH}:latest
        docker push ${REGISTRY_URL}/${CI_PROJECT_PATH}:latest
      fi
    
    - echo "✅ Published images:"
    - echo "  - ${REGISTRY_URL}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA}"
    - echo "  - ${REGISTRY_URL}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}"
    - if [ "$CI_COMMIT_REF_NAME" = "main" ]; then echo "  - ${REGISTRY_URL}/${CI_PROJECT_PATH}:latest"; fi
  
  dependencies:
    - build
  
  only:
    - main
    - develop

# Security scanning (optional)
security_scan:
  stage: test
  image: docker:24-dind
  services:
    - docker:24-dind
  
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
  
  before_script:
    - docker info
  
  script:
    - docker build -t security-scan-image .
    - echo "🔍 Security scan completed (add your preferred security scanner here)"
    # Example: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image security-scan-image
  
  allow_failure: true
  only:
    - main
    - merge_requests 