name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: "1.23"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: featureflags
          POSTGRES_PASSWORD: featureflags
          POSTGRES_DB: featureflags
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_USER: featureflags
      TEST_DB_PASSWORD: featureflags
      TEST_DB_NAME: featureflags_test
      POSTGRES_DB: featureflags
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U featureflags; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Create test database
      run: |
        PGPASSWORD=featureflags psql -h localhost -U featureflags -c "CREATE DATABASE featureflags_test;" || true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: |
        echo "Running unit tests..."
        go test -v -race -coverprofile=coverage.out ./service/...
        
        echo "Running integration tests..."
        go test -v -race ./test/...
    
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
    
    - name: Build application
      run: |
        echo "Building application..."
        go build -o featureflags ./cmd/main.go
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
        retention-days: 7
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.out
        retention-days: 7


  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.sha }}
    
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      continue-on-error: true
      if: steps.push.outcome == 'success'
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
    
    - name: Output image details
      run: |
        echo "✅ Published Docker images:"
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          echo "  - $tag"
        done
        echo ""
        echo "📋 Image digest: ${{ steps.push.outputs.digest }}"
        echo "🏷️  Commit SHA: ${{ github.sha }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      id: build
      uses: docker/build-push-action@v5
      continue-on-error: true
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: featureflags:latest
        cache-from: type=gha
        load: true
    
    - name: Run Trivy vulnerability scanner
      id: trivy
      uses: aquasecurity/trivy-action@master
      if: steps.build.outcome == 'success'
      continue-on-error: true
      with:
        image-ref: 'featureflags:latest'  # Use local image
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        name: security-scan-results
        path: trivy-results.sarif
        retention-days: 7

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for testing
      id: build
      uses: docker/build-push-action@v5
      continue-on-error: true
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: featureflags:latest
        cache-from: type=gha
        load: true
    
    - name: Create .env file for integration tests
      if: steps.build.outcome == 'success'
      run: |
        # Find an available port for testing
        TEST_PORT=9080
        while netstat -tuln | grep -q ":$TEST_PORT "; do
          TEST_PORT=$((TEST_PORT + 1))
        done
        echo "🔍 Using port $TEST_PORT for integration tests"
        
        cat > .env << EOF
        POSTGRES_HOST=db
        POSTGRES_USER=featureflags
        POSTGRES_PASSWORD=featureflags
        POSTGRES_DB=featureflags
        APP_PORT=$TEST_PORT
        SWAGGER_ENABLED=true
        EOF
        
        # Store the port for later steps
        echo "TEST_PORT=$TEST_PORT" >> $GITHUB_ENV
    
    - name: Start services with Docker Compose
      if: steps.build.outcome == 'success'
      run: |
        # Clean up any existing containers first
        echo "🧹 Cleaning up any existing containers..."
        docker compose down -v 2>/dev/null || true
        
        # Update docker compose to use the built image
        docker tag featureflags:latest featureflags-app:latest
        
        # Show environment variables for debugging
        echo "📋 Environment variables:"
        cat .env
        
        # Check if port is available
        echo "🔍 Checking port availability..."
        if netstat -tuln | grep -q ":$TEST_PORT "; then
          echo "⚠️  Port $TEST_PORT is in use, attempting to free it..."
          # Kill any process using the port
          sudo lsof -ti:$TEST_PORT | xargs -r sudo kill -9 2>/dev/null || true
          sleep 2
        fi
        
        # Start services
        echo "🚀 Starting services on port $TEST_PORT..."
        docker compose up -d
        
        # Show running containers
        echo "📊 Running containers:"
        docker compose ps
    
    - name: Wait for services
      if: steps.build.outcome == 'success'
      run: |
        echo "⏳ Waiting for services to be ready..."
        
        # Show logs for debugging if needed
        echo "📋 Checking service logs..."
        docker compose logs app
        
        # Wait for health endpoint
        echo "🔍 Testing health endpoint on port $TEST_PORT..."
        for i in {1..30}; do
          if curl -f http://localhost:$TEST_PORT/health; then
            echo "✅ Services are ready!"
            break
          fi
          echo "⏳ Attempt $i/30 - waiting 2 seconds..."
          sleep 2
          if [ $i -eq 30 ]; then
            echo "❌ Services failed to start within 60 seconds"
            echo "📋 Final container status:"
            docker compose ps
            echo "📋 App logs:"
            docker compose logs app
            echo "📋 DB logs:"
            docker compose logs db
            echo "📋 Port status:"
            netstat -tuln | grep :$TEST_PORT || echo "No process listening on port $TEST_PORT"
            exit 1
          fi
        done
    
    - name: Run integration tests
      if: steps.build.outcome == 'success'
      run: |
        echo "🧪 Running integration tests on port $TEST_PORT..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:$TEST_PORT/health | jq .
        
        # Test API endpoints
        echo "Testing flags endpoint..."
        curl -f http://localhost:$TEST_PORT/api/v1/flags | jq .
        
        # Test Swagger (if enabled)
        echo "Testing Swagger UI..."
        curl -f http://localhost:$TEST_PORT/swagger/index.html > /dev/null && echo "✅ Swagger UI accessible" || echo "ℹ️  Swagger may be disabled"
        
        # Test flag creation and scenarios
        echo "Testing flag creation..."
        FLAG_RESPONSE=$(curl -X POST http://localhost:$TEST_PORT/api/v1/flags \
          -H "Content-Type: application/json" \
          -H "X-Actor: github-ci" \
          -d '{"name": "ci_test_flag"}')
        
        echo "Created flag: $FLAG_RESPONSE"
        FLAG_ID=$(echo $FLAG_RESPONSE | jq -r .id)
        
        # Test flag toggle
        echo "Testing flag toggle..."
        curl -X POST http://localhost:$TEST_PORT/api/v1/flags/$FLAG_ID/toggle \
          -H "Content-Type: application/json" \
          -H "X-Actor: github-ci" \
          -d '{"enable": true, "reason": "Integration test"}' | jq .
        
        # Test audit logs
        echo "Testing audit logs..."
        curl -f http://localhost:$TEST_PORT/api/v1/flags/$FLAG_ID/audit | jq .
        
        echo "✅ All integration tests passed!"
    
    - name: Stop services
      if: always()
      run: docker compose down -v

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, publish, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://featureflags-staging.example.com
    
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "This would typically trigger your deployment pipeline"
        
        # Example deployment commands:
        # kubectl set image deployment/featureflags featureflags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        # or trigger ArgoCD sync, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, publish, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://featureflags.example.com
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "This would typically trigger your production deployment pipeline"
        
        # Example deployment commands:
        # kubectl set image deployment/featureflags featureflags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        # or trigger ArgoCD sync, etc. 